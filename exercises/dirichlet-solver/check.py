from random import choice, randint
from time import perf_counter

import correction_helper as checker
import numpy as np

checker.exclude_file_from_traceback(__file__)


SEEDS = [
    np.array(
        [
            [0, 0, 3, 9, 0],
            [0, 1, 3, 6, 9],
            [0, 1, 2, 3, 3],
            [0, 1, 1, 1, 0],
            [0, 2, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 1, 9, 0],
            [0, 2, 3, 6, 9],
            [0, 2, 3, 3, 0],
            [0, 3, 4, 3, 0],
            [0, 6, 7, 5, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 8, 0],
            [1, 6, 7, 7, 9],
            [9, 7, 6, 4, 0],
            [6, 7, 6, 3, 0],
            [0, 9, 8, 2, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 2, 8, 0],
            [4, 6, 5, 7, 9],
            [9, 6, 5, 6, 9],
            [0, 4, 3, 3, 0],
            [0, 7, 0, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 9, 8, 0],
            [0, 3, 6, 7, 9],
            [2, 4, 5, 5, 1],
            [6, 6, 5, 7, 9],
            [0, 9, 2, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 9, 9, 0],
            [0, 4, 7, 8, 9],
            [9, 7, 7, 7, 5],
            [9, 8, 7, 8, 9],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 0, 0, 0],
            [0, 2, 2, 2, 2],
            [3, 4, 4, 4, 3],
            [9, 7, 6, 7, 9],
            [0, 9, 6, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 8, 0, 0],
            [0, 2, 4, 3, 6],
            [1, 3, 3, 2, 0],
            [9, 6, 3, 2, 0],
            [0, 9, 1, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 8, 9, 0, 0],
            [0, 4, 5, 4, 9],
            [1, 3, 3, 2, 0],
            [2, 4, 2, 1, 0],
            [0, 9, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 9, 0],
            [9, 8, 8, 8, 9],
            [1, 6, 7, 6, 1],
            [9, 8, 8, 8, 9],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 1, 9, 0],
            [0, 3, 4, 7, 9],
            [9, 6, 5, 6, 8],
            [9, 7, 4, 4, 0],
            [0, 9, 0, 6, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 0, 0],
            [0, 5, 5, 2, 1],
            [9, 6, 4, 2, 0],
            [6, 6, 3, 2, 0],
            [0, 9, 0, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 0, 0],
            [4, 6, 6, 4, 7],
            [2, 5, 5, 3, 0],
            [8, 7, 6, 3, 0],
            [0, 9, 9, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 8, 6, 0],
            [0, 2, 5, 6, 9],
            [0, 2, 4, 4, 0],
            [0, 2, 5, 6, 6],
            [0, 1, 8, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 1, 9, 0],
            [9, 8, 6, 8, 9],
            [9, 8, 7, 8, 9],
            [9, 8, 6, 8, 9],
            [0, 9, 1, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0],
            [8, 3, 2, 3, 8],
            [0, 1, 1, 1, 0],
            [0, 0, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 8, 6, 0],
            [0, 3, 6, 7, 9],
            [4, 5, 6, 7, 8],
            [8, 7, 6, 7, 6],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 6, 8, 0],
            [0, 2, 5, 7, 9],
            [0, 3, 5, 6, 5],
            [2, 5, 6, 7, 7],
            [0, 9, 7, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 6, 0],
            [8, 7, 7, 7, 9],
            [2, 4, 5, 6, 7],
            [0, 2, 3, 5, 2],
            [0, 1, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 6, 9, 0],
            [0, 3, 6, 8, 9],
            [6, 6, 7, 8, 9],
            [9, 8, 8, 8, 7],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 9, 9, 0],
            [0, 4, 7, 8, 9],
            [9, 7, 7, 7, 5],
            [9, 8, 7, 8, 9],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 1, 6, 0],
            [2, 5, 4, 6, 9],
            [9, 5, 4, 5, 8],
            [0, 2, 2, 2, 0],
            [0, 1, 0, 1, 0],
        ]
    ),
    np.array(
        [
            [0, 7, 9, 9, 0],
            [0, 5, 7, 8, 9],
            [9, 6, 6, 7, 8],
            [0, 4, 4, 6, 4],
            [0, 6, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 5, 8, 0],
            [2, 6, 6, 7, 9],
            [9, 7, 6, 5, 0],
            [6, 7, 6, 7, 8],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 8, 0, 0],
            [0, 3, 5, 4, 8],
            [9, 6, 5, 3, 0],
            [7, 7, 6, 3, 0],
            [0, 9, 9, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 2],
            [3, 3, 2, 1, 0],
            [9, 6, 3, 1, 0],
            [0, 9, 3, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 2, 7, 0],
            [0, 3, 4, 6, 9],
            [9, 6, 5, 4, 0],
            [7, 7, 6, 5, 1],
            [0, 9, 7, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 9, 9, 0],
            [0, 3, 6, 7, 9],
            [5, 5, 5, 4, 0],
            [9, 7, 5, 4, 0],
            [0, 9, 4, 7, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 7, 0],
            [1, 6, 7, 7, 9],
            [9, 7, 6, 5, 0],
            [7, 7, 5, 7, 9],
            [0, 9, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 7, 9, 9, 0],
            [0, 5, 7, 8, 9],
            [9, 6, 6, 7, 8],
            [0, 4, 4, 6, 4],
            [0, 6, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 6, 9, 0],
            [0, 3, 6, 8, 9],
            [6, 6, 7, 8, 9],
            [9, 8, 8, 8, 7],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 9, 0],
            [0, 5, 7, 8, 9],
            [0, 4, 6, 7, 7],
            [1, 5, 6, 7, 6],
            [0, 9, 6, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 0, 0, 0],
            [0, 2, 2, 3, 8],
            [9, 5, 3, 2, 0],
            [7, 6, 3, 2, 0],
            [0, 9, 1, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 1, 9, 0],
            [0, 2, 3, 6, 9],
            [9, 4, 3, 3, 0],
            [0, 2, 2, 3, 0],
            [0, 2, 0, 7, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 0, 0, 0],
            [8, 7, 4, 4, 9],
            [9, 7, 5, 3, 0],
            [6, 7, 6, 3, 0],
            [0, 9, 9, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 5, 9, 0],
            [0, 4, 6, 8, 9],
            [9, 7, 7, 8, 9],
            [9, 8, 7, 8, 8],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 5, 8, 0],
            [2, 6, 6, 7, 9],
            [9, 7, 6, 5, 0],
            [6, 7, 6, 7, 8],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 9, 9, 0],
            [0, 3, 6, 7, 9],
            [9, 6, 5, 4, 0],
            [9, 7, 4, 4, 0],
            [0, 9, 0, 8, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 1, 9, 0],
            [0, 2, 3, 6, 9],
            [1, 3, 3, 3, 0],
            [9, 6, 3, 3, 0],
            [0, 9, 0, 6, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 7, 0],
            [3, 7, 8, 8, 9],
            [9, 8, 8, 8, 8],
            [7, 8, 8, 8, 7],
            [0, 9, 8, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 6, 6, 0],
            [8, 8, 7, 7, 9],
            [9, 8, 7, 6, 3],
            [8, 8, 7, 7, 6],
            [0, 9, 6, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 5, 8, 0],
            [2, 6, 6, 7, 9],
            [9, 7, 6, 5, 0],
            [6, 7, 6, 7, 8],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 7, 0, 1, 0],
            [0, 4, 3, 4, 9],
            [9, 6, 4, 3, 0],
            [9, 7, 4, 4, 0],
            [0, 9, 1, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 0, 0, 0],
            [0, 2, 2, 2, 1],
            [0, 3, 4, 5, 7],
            [6, 6, 6, 7, 8],
            [0, 9, 7, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 2, 6, 0],
            [0, 3, 4, 6, 9],
            [5, 5, 5, 5, 2],
            [8, 7, 6, 7, 8],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 9, 6, 0],
            [0, 3, 6, 7, 9],
            [0, 3, 5, 7, 9],
            [0, 4, 4, 7, 8],
            [0, 9, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 1, 8, 0],
            [0, 2, 3, 6, 9],
            [5, 3, 3, 4, 4],
            [0, 2, 2, 3, 0],
            [0, 3, 0, 6, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 0, 0],
            [0, 5, 5, 2, 1],
            [9, 6, 4, 2, 0],
            [6, 6, 3, 2, 0],
            [0, 9, 0, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 3, 8, 0],
            [0, 3, 4, 6, 9],
            [7, 5, 4, 3, 0],
            [6, 6, 4, 2, 0],
            [0, 9, 4, 1, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 9, 0],
            [9, 8, 8, 8, 9],
            [1, 6, 7, 6, 1],
            [9, 8, 8, 8, 9],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 6, 0],
            [0, 1, 2, 5, 9],
            [4, 2, 2, 3, 4],
            [0, 1, 1, 1, 0],
            [0, 1, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 3, 3, 0],
            [7, 7, 5, 5, 9],
            [9, 7, 5, 3, 0],
            [7, 7, 5, 2, 0],
            [0, 9, 6, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 1, 8, 0],
            [0, 3, 4, 7, 9],
            [8, 5, 5, 7, 9],
            [0, 4, 4, 7, 8],
            [0, 7, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 1, 9, 0],
            [9, 8, 6, 8, 9],
            [9, 8, 7, 8, 9],
            [9, 8, 6, 8, 9],
            [0, 9, 1, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 8, 0],
            [0, 2, 3, 6, 9],
            [8, 5, 4, 4, 0],
            [6, 6, 4, 6, 7],
            [0, 9, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 6, 9, 0],
            [0, 3, 6, 8, 9],
            [6, 6, 7, 8, 9],
            [9, 8, 8, 8, 7],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 2],
            [3, 3, 2, 1, 0],
            [9, 6, 3, 1, 0],
            [0, 9, 3, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 1, 7, 0],
            [0, 2, 3, 6, 9],
            [2, 2, 3, 5, 7],
            [0, 1, 2, 4, 0],
            [0, 0, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 2, 6, 0],
            [0, 3, 4, 6, 9],
            [5, 5, 5, 5, 2],
            [8, 7, 6, 7, 8],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 9, 7, 0],
            [0, 3, 6, 7, 9],
            [4, 4, 5, 6, 5],
            [0, 4, 4, 7, 9],
            [0, 8, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 8, 7, 0],
            [0, 3, 6, 7, 9],
            [8, 6, 6, 6, 4],
            [7, 7, 6, 7, 7],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 8, 0],
            [8, 7, 7, 7, 9],
            [0, 4, 5, 4, 0],
            [0, 4, 5, 4, 0],
            [0, 7, 7, 7, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 6, 0],
            [3, 6, 7, 7, 9],
            [1, 5, 6, 6, 4],
            [8, 7, 6, 7, 7],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 4, 0, 0],
            [0, 1, 2, 1, 1],
            [0, 2, 2, 1, 0],
            [6, 5, 3, 1, 0],
            [0, 9, 4, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 9, 0],
            [7, 8, 8, 8, 9],
            [9, 8, 7, 6, 2],
            [9, 8, 6, 7, 7],
            [0, 9, 2, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 5, 9, 0],
            [0, 3, 5, 7, 9],
            [5, 5, 5, 5, 1],
            [9, 7, 5, 7, 9],
            [0, 9, 1, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 1, 8, 0],
            [3, 6, 5, 7, 9],
            [9, 7, 6, 6, 4],
            [6, 7, 6, 7, 7],
            [0, 9, 4, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 7, 9, 8, 0],
            [0, 4, 6, 7, 9],
            [2, 3, 4, 5, 7],
            [0, 2, 2, 2, 0],
            [0, 3, 0, 1, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 2, 6, 0],
            [0, 3, 4, 6, 9],
            [5, 5, 5, 5, 2],
            [8, 7, 6, 7, 8],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 7, 9, 8, 0],
            [0, 4, 6, 7, 9],
            [2, 3, 4, 5, 7],
            [0, 2, 2, 2, 0],
            [0, 3, 0, 1, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 0, 0],
            [4, 6, 6, 4, 7],
            [2, 5, 5, 3, 0],
            [8, 7, 6, 3, 0],
            [0, 9, 9, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 6, 0],
            [0, 1, 2, 5, 9],
            [4, 2, 2, 3, 4],
            [0, 1, 1, 1, 0],
            [0, 1, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 9, 9, 0],
            [0, 4, 7, 8, 9],
            [5, 6, 7, 7, 5],
            [9, 8, 8, 8, 8],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 5, 9, 0],
            [0, 4, 6, 8, 9],
            [9, 7, 7, 8, 9],
            [9, 8, 7, 8, 8],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 9, 0],
            [7, 8, 8, 8, 9],
            [9, 8, 7, 6, 2],
            [9, 8, 6, 7, 7],
            [0, 9, 2, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 9, 9, 0],
            [0, 4, 7, 8, 9],
            [9, 7, 7, 7, 5],
            [9, 8, 7, 8, 9],
            [0, 9, 5, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 8, 0, 0],
            [0, 2, 4, 3, 6],
            [1, 3, 3, 2, 0],
            [9, 6, 3, 2, 0],
            [0, 9, 1, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 5, 7, 0],
            [0, 3, 5, 7, 9],
            [4, 4, 5, 7, 9],
            [0, 4, 4, 7, 8],
            [0, 8, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 9, 6, 0],
            [0, 3, 6, 7, 9],
            [0, 3, 5, 7, 9],
            [0, 4, 4, 7, 8],
            [0, 9, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 0, 0],
            [1, 5, 5, 2, 1],
            [5, 5, 4, 2, 0],
            [6, 6, 4, 2, 0],
            [0, 9, 4, 2, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 0, 0, 0],
            [0, 3, 3, 4, 9],
            [9, 6, 5, 4, 0],
            [6, 7, 7, 7, 8],
            [0, 9, 9, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 6, 6, 0],
            [0, 3, 5, 6, 9],
            [5, 5, 5, 4, 0],
            [8, 7, 6, 5, 1],
            [0, 9, 7, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 7, 8, 0],
            [0, 2, 5, 7, 9],
            [0, 2, 4, 6, 7],
            [0, 2, 3, 6, 6],
            [0, 3, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 6, 0],
            [0, 5, 6, 6, 9],
            [9, 5, 4, 3, 0],
            [0, 2, 2, 2, 0],
            [0, 1, 0, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 7, 7, 0],
            [0, 3, 5, 6, 9],
            [3, 4, 4, 3, 0],
            [7, 6, 4, 2, 0],
            [0, 9, 4, 1, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0],
            [8, 3, 2, 3, 8],
            [0, 1, 1, 1, 0],
            [0, 0, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 6, 0],
            [2, 6, 7, 7, 9],
            [5, 6, 6, 6, 4],
            [8, 7, 5, 7, 8],
            [0, 9, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 6, 6, 0],
            [0, 3, 5, 6, 9],
            [9, 6, 5, 4, 0],
            [8, 7, 5, 5, 2],
            [0, 9, 3, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 2, 6, 0],
            [7, 7, 5, 6, 9],
            [9, 7, 5, 4, 1],
            [8, 7, 4, 4, 0],
            [0, 9, 0, 8, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 0, 0, 0],
            [0, 1, 1, 2, 6],
            [0, 1, 1, 1, 0],
            [0, 2, 1, 1, 0],
            [0, 6, 0, 2, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 1, 7, 0],
            [0, 2, 3, 6, 9],
            [2, 2, 3, 5, 7],
            [0, 1, 2, 4, 0],
            [0, 0, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1],
            [7, 3, 2, 2, 1],
            [0, 2, 2, 4, 3],
            [0, 3, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 3, 1, 8, 0],
            [0, 2, 3, 6, 9],
            [0, 2, 3, 4, 1],
            [0, 3, 3, 6, 8],
            [0, 7, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 6, 0],
            [2, 6, 7, 7, 9],
            [5, 6, 6, 6, 4],
            [8, 7, 5, 7, 8],
            [0, 9, 0, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 1, 0, 0, 0],
            [0, 2, 2, 3, 8],
            [9, 5, 3, 2, 0],
            [7, 6, 3, 2, 0],
            [0, 9, 1, 3, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 0, 0, 0],
            [0, 1, 1, 1, 0],
            [0, 1, 2, 3, 3],
            [0, 1, 3, 6, 9],
            [0, 0, 3, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 2, 0, 7, 0],
            [0, 2, 3, 6, 9],
            [0, 3, 4, 5, 3],
            [7, 6, 5, 7, 9],
            [0, 9, 3, 9, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0],
            [8, 3, 2, 3, 8],
            [0, 1, 1, 1, 0],
            [0, 0, 0, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 0, 8, 7, 0],
            [0, 2, 5, 6, 9],
            [0, 3, 4, 3, 0],
            [7, 6, 5, 2, 0],
            [0, 9, 8, 0, 0],
        ]
    ),
    np.array(
        [
            [0, 9, 9, 8, 0],
            [8, 7, 7, 7, 9],
            [0, 4, 5, 4, 0],
            [0, 4, 5, 4, 0],
            [0, 7, 7, 7, 0],
        ]
    ),
]


def is_dirichlet(square):
    """Check if the square is solved.
    For a 3×3 square we expect a 5×5 np.array:
    - one line above, below, to the left, and to the right.
    - the 4 angles are unused.
    - Each cell in the middle 3×3 is the mean of the 4 surrounding cells.
    """
    size = square.shape[0]
    for x in range(1, size - 1):
        for y in range(1, size - 1):
            if (
                square[x, y]
                != (
                    square[x - 1, y]
                    + square[x + 1, y]
                    + square[x, y - 1]
                    + square[x, y + 1]
                )
                / 4
            ):
                return False
    return True


def is_reasonable(x):
    return 0 <= x < 10000


def new_one():
    s = np.zeros((5, 5), dtype=int)
    while True:
        s[1, 2] = randint(0, 9)
        s[2, 3] = randint(0, 9)
        s[2, 1] = randint(0, 9)
        s[3, 2] = randint(0, 9)
        s[2, 2] = s[1, 2] + s[2, 3] + s[2, 1] + s[3, 2]
        if s[2, 2] % 4 != 0:
            continue
        s[2, 2] = s[2, 2] // 4

        for s[1, 0] in range(10):
            for s[1, 1] in range(10):
                s[0, 1] = 4 * s[1, 1] - s[1, 0] - s[2, 1] - s[1, 2]
                if not is_reasonable(s[0, 1]):
                    continue
                for s[0, 2] in range(10):
                    s[1, 3] = 4 * s[1, 2] - s[0, 2] - s[1, 1] - s[2, 2]
                    if not is_reasonable(s[1, 3]):
                        continue
                    for s[0, 3] in range(10):
                        s[1, 4] = 4 * s[1, 3] - s[0, 3] - s[1, 2] - s[2, 3]
                        if not is_reasonable(s[1, 4]):
                            continue
                        for s[2, 4] in range(10):
                            s[3, 3] = 4 * s[2, 3] - s[2, 2] - s[1, 3] - s[2, 4]
                            if not is_reasonable(s[3, 3]):
                                continue
                            for s[3, 4] in range(10):
                                s[4, 3] = 4 * s[3, 3] - s[3, 2] - s[2, 3] - s[3, 4]
                                if not is_reasonable(s[4, 3]):
                                    continue
                                for s[4, 2] in range(10):
                                    s[3, 1] = 4 * s[3, 2] - s[2, 2] - s[3, 3] - s[4, 2]
                                    if not is_reasonable(s[3, 1]):
                                        continue
                                    s[2, 0] = 4 * s[2, 1] - s[1, 1] - s[3, 1] - s[2, 2]
                                    if not is_reasonable(s[2, 0]):
                                        continue
                                    for s[3, 0] in range(10):
                                        s[4, 1] = (
                                            4 * s[3, 1] - s[3, 0] - s[2, 1] - s[3, 2]
                                        )
                                        if not is_reasonable(s[4, 1]):
                                            continue
                                        assert is_dirichlet(s)
                                        return s


def main():
    deadline = perf_counter() + 10  # 10s max!
    to_test = 50
    with checker.student_code():
        from solution import dirichlet_square_solver
    for i in range(to_test):
        if perf_counter() > deadline:
            checker.fail(
                """I'm expecting your code to be a bit faster:
you solved {i} squares in ~10s,
while I want to test {to_test} in less than 10s.""".format(
                    i=i, to_test=to_test
                )
            )
        square = choice(SEEDS)
        original = square.copy()
        square[1:4, 1:4] = -1
        given = square.copy()
        with checker.student_code():
            dirichlet_square_solver(square)
        if not (original == square).all():
            checker.fail(
                "Given:",
                checker.code(repr(given)),
                "Your solver found:",
                checker.code(repr(square)),
                "While I expected:",
                checker.code(repr(original)),
            )


if __name__ == "__main__":
    main()
